// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Watchlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

model Liked {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  value     Float
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Ensures a unique combination of userId and movieId
}

model Review {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String    @db.ObjectId
  movieId   String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  movie     Movie     @relation(fields: [movieId], references: [id])
  likes      Int       @default(0)
  emojis     Int       @default(0)
  fire       Int       @default(0)
  popularity Int       @default(0) 
  reviewComment reviewComment[] //review comments 

  @@unique([userId, movieId]) // Ensures a unique combination of userId and movieId
}

model reviewComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  userId    String   @db.ObjectId
  reviewId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])

  @@index([reviewId]) // Adding an index for quicker lookups by reviewId
}


model Movie {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId    String   @unique
  title     String
  posterUrl String?
  watchlist Watchlist[]
  liked     Liked[]
  ratings   Rating[]
  reviews   Review[] // Relationship to reviews

  // other fields...
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String?
  email         String      @unique
  password      String?
  bio           String?
  image         String?
  avatarUrl     String?
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  watchlist     Watchlist[]
  liked         Liked[]
  ratings       Rating[]
  reviews       Review[]    // Relationship to reviews
  reviewComment reviewComment[] // relationship to reviewComments


  // other fields...
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
