// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Watchlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

model Liked {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String?
  email         String      @unique
  password      String?
  bio           String?
  image         String?
  avatarUrl     String?
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  watchlist     Watchlist[]
  liked         Liked[]
}

model Movie {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId    String      @unique
  title     String
  posterUrl String?
  watchlist Watchlist[]
  liked     Liked[]
  // other fields...
}
model Account{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  type          String
  provider      String
  providerAccountId String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

}
  
